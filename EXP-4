#Back Propogation Algorithm
     

import numpy as np
     

def sigmoid(x):
    return 1 / (1 + np.exp(-x))
     

def sigmoid_derivative(x):
    return x * (1 - x)
     

# Input data and labels
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
labels = np.array([[0], [1], [1], [0]])

# Define network architecture
input_size = 2
hidden_size = 2
output_size = 1

# Initialize random weights and biases
weights_input_hidden = np.random.uniform(-1, 1, (input_size, hidden_size))
bias_hidden = np.zeros((1, hidden_size))
weights_hidden_output = np.random.uniform(-1, 1, (hidden_size, output_size))
bias_output = np.zeros((1, output_size))

# Training parameters
learning_rate = 0.1
epochs = 10000
     

# Training loop
for _ in range(epochs):
    # Forward pass
    hidden_activation = sigmoid(np.dot(inputs, weights_input_hidden) + bias_hidden)
    output = sigmoid(np.dot(hidden_activation, weights_hidden_output) + bias_output)

    # Backpropagation
    output_error = labels - output
    output_delta = output_error * sigmoid_derivative(output)

    hidden_error = output_delta.dot(weights_hidden_output.T)
    hidden_delta = hidden_error * sigmoid_derivative(hidden_activation)

    # Update weights and biases
    weights_hidden_output += hidden_activation.T.dot(output_delta) * learning_rate
    bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
    weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
    bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate
     

# Testing the trained network
for i in range(len(inputs)):
    predicted = sigmoid(np.dot(sigmoid(np.dot(inputs[i], weights_input_hidden) + bias_hidden), weights_hidden_output) + bias_output)
    binary_predicted = (predicted >= 0.5).astype(int)  # Applying threshold for binary prediction
    print(f"Input: {inputs[i]}, Predicted: {binary_predicted[0][0]}, Actual: {labels[i][0]}")
